{"version":3,"sources":["components/ToDoListContainer.js","components/TodoContext.js","components/ToDoHead.js","components/ToDoCreate.js","components/ToDoListContent.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoContainer","styled","div","ToDoListContainer","children","craeteTodos","todoReducer","state","action","type","concat","todo","map","user","id","done","filter","Error","DispatchContext","createContext","StateContext","nextIdContext","TodoProvider","nextId","useRef","useReducer","dispatch","Provider","value","useTodoState","useContext","useTodoDispatch","ToDoHeadcontent","ToDoHead","count","className","length","CreateIcon","props","open","css","Form","form","TodoInput","input","ToDoItem","useState","setOpen","setValue","disPatch","onClick","onSubmit","e","preventDefault","todouser","current","text","placeholder","autoFocus","onChange","target","CheckIcon","ContentText","ContentDelete","ContentList","ToDoListContent","TodoListBlock","TodoList","todos","localStorage","setItem","JSON","stringify","key","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2622494e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoContainer = styled.div`\r\n  background: white;\r\n  border-radius: 20px;\r\n  margin-top: 3em;\r\n  width: 512px;\r\n  height: 768px;\r\n  position: relative;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0.04);\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nfunction ToDoListContainer({ children }) {\r\n  return (\r\n    <div>\r\n      <TodoContainer>{children}</TodoContainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoListContainer;\r\n","import React, { useReducer, createContext, useContext, useRef } from \"react\";\r\n\r\nconst craeteTodos = [];\r\n\r\nfunction todoReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"CREATE\":\r\n      return state.concat(action.todo);\r\n\r\n    case \"TOGGLE\":\r\n      return state.map((user) =>\r\n        user.id === action.id ? { ...user, done: !user.done } : user\r\n      );\r\n    case \"REMOVE\":\r\n      return state.filter((user) => user.id !== action.id);\r\n    default:\r\n      throw new Error(\"Error\");\r\n  }\r\n}\r\n\r\nconst DispatchContext = createContext();\r\nconst StateContext = createContext();\r\nconst nextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n  const nextId = useRef(4);\r\n  const [state, dispatch] = useReducer(todoReducer, craeteTodos);\r\n\r\n  return (\r\n    <StateContext.Provider value={state}>\r\n      <DispatchContext.Provider value={dispatch}>\r\n        <nextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </nextIdContext.Provider>\r\n      </DispatchContext.Provider>\r\n    </StateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTodoState() {\r\n  return useContext(StateContext);\r\n}\r\nexport function useTodoDispatch() {\r\n  return useContext(DispatchContext);\r\n}\r\nexport function useNextId() {\r\n  return useContext(nextIdContext);\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTodoState } from \"./TodoContext\";\r\n\r\nconst ToDoHeadcontent = styled.div`\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  padding-top: 10px;\r\n  padding-bottom: 20px;\r\n  font-weight: bold;\r\n  border-bottom: 1px solid #e9ecef;\r\n  h1 {\r\n    margin-bottom: 1px;\r\n  }\r\n  .day {\r\n    color: #868e96;\r\n    font-size: 0.9rem;\r\n  }\r\n  .todocount {\r\n    color: #51cf66;\r\n    margin-top: 20px;\r\n  }\r\n`;\r\n\r\nfunction ToDoHead() {\r\n  const todos = useTodoState();\r\n  const count = todos.filter((todo) => !todo.done);\r\n  return (\r\n    <ToDoHeadcontent>\r\n      <h1>2020년 7월 23일</h1>\r\n      <div className=\"day\">일요일</div>\r\n      <div className=\"todocount\">할 일 {count.length}개 남음</div>\r\n    </ToDoHeadcontent>\r\n  );\r\n}\r\n\r\nexport default ToDoHead;\r\n","import React, { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { useTodoDispatch, useNextId } from \"./TodoContext\";\r\n\r\nconst CreateIcon = styled.div`\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0;\r\n  transform: translate(-50%, 50%);\r\n  width: 60px;\r\n  height: 60px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50px;\r\n  font-size: 2.2rem;\r\n  font-weight: bold;\r\n  background-color: green;\r\n  color: white;\r\n  transition: 0.2s all ease-in;\r\n  z-index: 5;\r\n\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      background-color: #ff6b6b;\r\n      &:hover {\r\n        background-color: #ff8787;\r\n      }\r\n      &:active {\r\n        background-color: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `};\r\n`;\r\nconst Form = styled.form``;\r\nconst TodoInput = styled.input`\r\n  position: absolute;\r\n  height: 40px;\r\n  width: 90%;\r\n  left: 50%;\r\n  bottom: 0;\r\n  transform: translate(-50%, 50%);\r\n  outline: none;\r\n  border: none;\r\n  background-color: #576574;\r\n\r\n  opacity: 0;\r\n  transition: 0.5s all ease-in;\r\n  color: white;\r\n  font-size: 1.03rem;\r\n  padding-left: 1em;\r\n  padding-right: 1em;\r\n  box-shadow: 0 0 5px rgba(0, 0, 0.04);\r\n\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      left: 50%;\r\n      bottom: 80px;\r\n      transform: translate(-50%, 50%);\r\n      opacity: 1;\r\n      border-radius: 30px;\r\n      width: 70%;\r\n      &::placeholder {\r\n        color: white;\r\n        font-size: 1.03rem;\r\n      }\r\n    `};\r\n`;\r\nfunction ToDoItem() {\r\n  const nextId = useNextId();\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n  const disPatch = useTodoDispatch();\r\n\r\n  const onChange = (e) => setValue(e.target.value);\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const todouser = {\r\n      id: nextId.current,\r\n      text: value,\r\n      done: false,\r\n    };\r\n    disPatch({\r\n      type: \"CREATE\",\r\n      todo: todouser,\r\n    });\r\n\r\n    setOpen(false);\r\n    nextId.current += 1;\r\n  };\r\n\r\n  const onToggle = () => setOpen(!open);\r\n  return (\r\n    <>\r\n      <CreateIcon onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </CreateIcon>\r\n      <Form onSubmit={onSubmit}>\r\n        <TodoInput\r\n          placeholder=\"할 일을 입력후, Enter를 누르세요.\"\r\n          open={open}\r\n          autoFocus\r\n          onChange={onChange}\r\n        />\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdDone, MdDelete } from \"react-icons/md\";\r\nimport { useTodoDispatch } from \"./TodoContext\";\r\n\r\nconst CheckIcon = styled.div`\r\n  font-size: 1.7rem;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 20px;\r\n  border: 1px solid #38d9a9;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #38d9a9;\r\n      color: #38d9a9;\r\n    `}\r\n`;\r\nconst ContentText = styled.div`\r\n  width: 350px;\r\n\r\n  font-size: 1.1rem;\r\n  font-weight: bold;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n    `}\r\n`;\r\nconst ContentDelete = styled.div`\r\n  font-size: 1.5rem;\r\n  color: #dee2e6;\r\n  cursor: pointer;\r\n  opacity: 0;\r\n  &:hover {\r\n    color: red;\r\n  }\r\n`;\r\nconst ContentList = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  padding-top: 25px;\r\n  &:hover {\r\n    ${ContentDelete} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction ToDoListContent({ id, done, text }) {\r\n  const dispatch = useTodoDispatch();\r\n\r\n  const onToggle = () => {\r\n    dispatch({\r\n      type: \"TOGGLE\",\r\n      id,\r\n    });\r\n  };\r\n\r\n  const onRemove = () => {\r\n    dispatch({\r\n      type: \"REMOVE\",\r\n      id,\r\n    });\r\n  };\r\n  return (\r\n    <ContentList>\r\n      <CheckIcon onClick={onToggle} done={done}>\r\n        {done && <MdDone />}\r\n      </CheckIcon>\r\n      <ContentText done={done}>{text}</ContentText>\r\n      <ContentDelete>\r\n        <MdDelete onClick={onRemove} />\r\n      </ContentDelete>\r\n    </ContentList>\r\n  );\r\n}\r\n\r\nexport default ToDoListContent;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ToDoListContent from \"./ToDoListContent\";\r\nimport { useTodoState } from \"./TodoContext\";\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n\r\n  overflow-y: auto;\r\n`;\r\nfunction TodoList() {\r\n  const todos = useTodoState();\r\n  const savedata = () => {\r\n    localStorage.setItem(\"data\", JSON.stringify(todos));\r\n  };\r\n  savedata();\r\n  return (\r\n    <TodoListBlock>\r\n      {todos.map((todo) => (\r\n        <ToDoListContent\r\n          key={todo.id}\r\n          id={todo.id}\r\n          text={todo.text}\r\n          done={todo.done}\r\n        />\r\n      ))}\r\n    </TodoListBlock>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport ToDoListContainer from \"./components/ToDoListContainer\";\nimport ToDoHead from \"./components/ToDoHead\";\n\nimport ToDoItem from \"./components/ToDoCreate\";\nimport { TodoProvider } from \"./components/TodoContext\";\nimport TodoList from \"./components/TodoList\";\n\nconst GlobalStyle = createGlobalStyle`\nbody{\n  background: #e9ecef;\n  display : flex;\n  justify-content: center;\n  align-content : center;\n  box-sizing: border-box;\n  \n}\n`;\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <ToDoListContainer>\n        <ToDoHead />\n        <TodoList />\n        <ToDoItem />\n      </ToDoListContainer>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}